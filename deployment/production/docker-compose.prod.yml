version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: artparty_social_prod
      POSTGRES_USER: artparty
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U artparty -d artparty_social_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for WebSocket scaling)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD} --bind 0.0.0.0 --protected-mode yes

  # ArtPartySocial Backend
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile.prod
    environment:
      - DATABASE_URL=postgresql://artparty:${DB_PASSWORD}@db:5432/artparty_social_prod
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false
      - ENVIRONMENT=production
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=INFO
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - uploads_data:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Nginx serving static files and reverse proxy)
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - ./ssl:/etc/ssl/certs:ro
      - ./nginx.ssl.conf:/etc/nginx/nginx.conf:ro
      - ./logs:/var/log/nginx
    environment:
      - BACKEND_URL=http://backend:8000

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  uploads_data: 