---
name: Generate Tasks
---

# 🎯 Task Management & Progress Tracking Rule

## When to Create Task Lists

**ALWAYS** create and maintain task lists for:
- Complex multi-step operations (3+ distinct steps)
- Feature development or bug fixes
- Code refactoring or optimization
- System setup or configuration
- Any work spanning multiple files or components
- User requests with multiple requirements

## Task List Requirements

### 1. **Task Structure**
Every task must include:
- **ID**: Unique identifier (e.g., "setup-auth", "fix-login-bug")
- **Content**: Clear, actionable description
- **Status**: One of: `pending`, `in_progress`, `completed`, `cancelled`
- **Dependencies**: Array of task IDs that must be completed first

### 2. **Status Management**
- ✅ **Mark tasks as `completed` IMMEDIATELY** when finished
- 🔄 **Only ONE task should be `in_progress`** at a time
- 📋 **New tasks start as `pending`**
- ❌ **Use `cancelled`** for tasks no longer needed

### 3. **Dependency Tracking**
- List prerequisite tasks in the `dependencies` array
- Tasks cannot start until all dependencies are `completed`
- Use natural workflow order (e.g., "setup-database" before "run-migrations")

### 4. **Progress Visibility**
- Always show current progress when updating tasks
- Display completed tasks with ✅ checkmarks
- Show in-progress tasks with 🔄 indicators
- Indicate blocked tasks waiting on dependencies

## Implementation Examples

### Example 1: Feature Development
```json
[
  {
    "id": "design-user-auth",
    "content": "Design authentication system architecture",
    "status": "completed",
    "dependencies": []
  },
  {
    "id": "implement-jwt",
    "content": "Implement JWT token generation and validation",
    "status": "completed", 
    "dependencies": ["design-user-auth"]
  },
  {
    "id": "create-login-ui",
    "content": "Build login form component",
    "status": "in_progress",
    "dependencies": ["design-user-auth"]
  },
  {
    "id": "integrate-auth-api",
    "content": "Connect frontend login to backend API",
    "status": "pending",
    "dependencies": ["implement-jwt", "create-login-ui"]
  }
]
```

### Example 2: Bug Fix
```json
[
  {
    "id": "reproduce-canvas-bug",
    "content": "Reproduce canvas creation button not working",
    "status": "completed",
    "dependencies": []
  },
  {
    "id": "debug-dom-timing",
    "content": "Investigate DOM element initialization timing",
    "status": "completed",
    "dependencies": ["reproduce-canvas-bug"]
  },
  {
    "id": "fix-element-init",
    "content": "Move element initialization to DOM ready event",
    "status": "completed",
    "dependencies": ["debug-dom-timing"]
  },
  {
    "id": "test-canvas-creation",
    "content": "Verify canvas creation works after fix",
    "status": "completed",
    "dependencies": ["fix-element-init"]
  }
]
```

## Task Update Protocol

### Starting Work
1. **Create task list** with `merge: false` for new projects
2. **Mark first task as `in_progress`**
3. **Update progress** as work proceeds

### Completing Tasks
1. **Mark task as `completed`** with `merge: true`
2. **Start next available task** (dependencies met)
3. **Add new tasks** if requirements expand

### Progress Communication
Always show visual progress when updating tasks:
```
✅ Task 1: Setup database (completed)
✅ Task 2: Create user model (completed)  
🔄 Task 3: Implement authentication (in_progress)
📋 Task 4: Add login UI (pending - depends on Task 3)
📋 Task 5: Write tests (pending - depends on Task 3)
```

## Mandatory Usage

This rule applies to ALL development work. Use the `todo_write` tool:
- **At project start**: Create comprehensive task breakdown
- **During development**: Update status in real-time
- **When completing work**: Mark all tasks as completed
- **When scope changes**: Add new tasks with proper dependencies

## Benefits

✅ **Never lose track** of what needs to be done
✅ **Clear dependencies** prevent work in wrong order
✅ **Visual progress** shows accomplishments
✅ **Systematic approach** ensures thorough completion
✅ **Easy handoff** to other developers or future work

Remember: **Good task management is not overhead—it's the foundation of reliable development.**


✅ **Systematic approach** ensures thorough completion
✅ **Easy handoff** to other developers or future work

Remember: **Good task management is not overhead—it's the foundation of reliable development.**
